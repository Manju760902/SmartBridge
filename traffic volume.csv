import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_absolute_error, r2_score

# Step 1: Load the data
df = pd.read_csv("traffic volume.csv")

# Step 2: Initial Exploration
print("Data Shape:", df.shape)
print(df.info())
print(df.describe())

# Step 3: Convert datetime column if exists
if 'date_time' in df.columns:
    df['date_time'] = pd.to_datetime(df['date_time'])
    df['hour'] = df['date_time'].dt.hour
    df['dayofweek'] = df['date_time'].dt.dayofweek

# Step 4: Handle missing values
df = df.dropna()

# Step 5: Feature selection
features = ['hour', 'dayofweek', 'temp', 'rain_1h', 'snow_1h', 'clouds_all']
target = 'traffic_volume'

# Filter out only relevant columns
df = df[features + [target]]

# Step 6: Train/Test Split
X = df[features]
y = df[target]
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Step 7: Train Random Forest Regressor
model = RandomForestRegressor(n_estimators=100, random_state=42)
model.fit(X_train, y_train)

# Step 8: Evaluate the model
y_pred = model.predict(X_test)
print("MAE:", mean_absolute_error(y_test, y_pred))
print("RÂ² Score:", r2_score(y_test, y_pred))

# Step 9: Visualize predictions
plt.figure(figsize=(10, 5))
plt.plot(y_test.values[:100], label="Actual")
plt.plot(y_pred[:100], label="Predicted")
plt.title("Traffic Volume Prediction")
plt.xlabel("Samples")
plt.ylabel("Traffic Volume")
plt.legend()
plt.show()
